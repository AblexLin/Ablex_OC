 **************************************************************************************************
 *** git 常用快捷命令***
 mkdir             -- 创建一个文件夹
 pwd               -- 查看当前路径
 git init          -- 创建git目录仓库
 ls －ah           -- 查看含有.的文件夹等方式
 git add           -- 将文件添加到仓库中
 git commit -m ""  -- 将文件提交到仓库并添加注释
 git diff          -- 查看当前文件的变化
 git status        -- 查看当前仓库的状态
 git log           -- 查看日志  
 git log --pretty=oneline -- 单行显示日志
 git log --graph --pretty=oneline --abbrev-commit  -- 能够查看到合并分支情况的查看日志方法
 git log -p -1     -- 查看上次代码修改的内容
 git reflog        -- 查看所有的行为
 git log -p filename -- 查看指定文件的日志信息
 cat file          -- 查看文件内容
 git diff HEAD -- file -- 查看当前版本和服务器最新版本的差异 
 rm                -- 删除文件
 git add .         -- 将所有的修改都提交到stage 
 git blame filename         -- 谁在上面时候修改了什么
 git branch -dr    -- 删除remote上的分支

 *** git 仓库管理  ***
 *** 如果在本地建立好文件夹和文件，想要上传到远程仓库，必要条件说远程仓库说空的，本地的.git文件是刚刚生成到不可以在有文件的时候push肯定会失败的***
 git remote add origin git@github.com:AblexLin/Ablex_Git.git        -- 关联到远程仓库
 ssh-keygen -t rsa -C "youremail@example.com"                       -- 创建SSH key
 git push -u origin master                                          -- 更新全部到github第一次用
 git push origin master                                             -- 更新推送到github
 git clone git@github.com:AblexLin/Ablex_Git.git                    -- 从远程仓库拷贝到本地
 git remote -v                                                      -- 显示当前关联远程仓库信息
 git remote                                                         -- 显示当前关联仓库名称

 *** git 分支管理  ***
 git checkout -b filename -- 新建分支并切换到对应分支可以使用git branch/git status查看分支指向
   git branch branchname 创建分支
   git checkout branchname 切换到分支
 git merge branchname  -- 合并分支到master上面去(合并的时候，当前必须在master分支上才能合并)
 git merge --no-ff -m "注释" branchname -- 不使用fast forward方式合并分支，使用普通方式合并，合并后历史有分支，能够看出来曾经合并过！
 git branch -d branchname -- 删除分支
 git branch -D branchname -- 删除未合并的分支，强制删除

 *** git 副本保存  ***
 git stash          -- 保存当前的副本，让副本状态变成未修改到样子
 git stash list     -- 查看之前保存的有多少
 git stash apply    -- 恢复之前保存的stash，但是不会删除stash中的备份
 git stash pop      -- 恢复之前保存的stash，并删除stash中的备份
 git stash drop     -- 在使用了apply后可以使用这个drop来删除stash中的备份文件，按照堆栈方式删除
 git stash apply stash@{0} -- 可以指定恢复哪一个备份的副本

 *** 版本回退***
 git reset --hard HEAD^
 git reset --hard HEAD^^^
 git reset --hard HEAD~100
 git reset --hard commit_id

 *** 撤销修改***
 git checkout -- file
 1.文件没有被add打时候执行，文件会被还原
 2.文件已经被add但是还没有commit的时候执行，需要先执行git reset HEAD file将文件从
 stage中退回到本地，再执行git checkout -- file就能够撤销修改了
 
 *** 使用标签  ***
 git tag v1.0                                   -- 创建一个标签，默认指向最新的提交
 git tag -a <tagname> -m "blablabla..."         -- 创建标签并添加注释
 git tag -s <tagname> -m "blablabla..."         -- 带有pgp签名的标签，需要装有pgp才可以使用
 git tag                                        -- 查看已有到标签
 git show                                       -- 查看标签的内容
 git tag commit_id                              -- 指定版本号打标签    
 git tag -d <tagname>                           -- 删除标签
 git push origin <tagname>                      -- 推送指定标签到远程仓库
 git push origin --tags                         -- 推送全部标签到远程仓库
 PS:本地的标签在push的时候不会自动push到远程仓库所有可以直接在本地删除
 ps:已经push到远程的标签必须先删除本地的标签，然后再执行git push origin :refs/tags/v0.9去删除

 *** 别名设置  ***
 git config --global alias.st status
 git config --global alias.co checkout
 git config --global alias.ci commit
 git config --global alias.br branch
 git config --global alias.unstage 'reset HEAD'
 git config --global alias.last 'log -1' 
 git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
 git config --global user.name "Your Name"
 git config --global user.email you@example.com

 *** Finder设置全文件夹可见  ***
 defaults write com.apple.finder AppleShowAllFiles TRUE
 killall Finder
 *** Finder设置全文件夹可见  ***

 /--------分--------隔--------符--------/
 
 *** vi编辑器使用常用快捷键***
 :w                -- 保存文件但不退出vi
 :w file           -- 将修改另外保存到file中，不退出vi
 :w!               -- 强制保存，不推出vi
 :wq               -- 保存文件并退出vi
 :wq!              -- 强制保存文件，并退出vi
 q:                -- 不保存文件，退出vi
 :q!               -- 不保存文件，强制退出vi
 :e!               -- 放弃所有修改，从上次保存文件开始再编辑
 ***************************************************************************************************
